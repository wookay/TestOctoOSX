## Documentation: http://docs.travis-ci.com/user/languages/julia/

language: julia

services:
 - postgresql
 - mysql

os:
#  - linux
  - osx

julia:
  - nightly

env:
  - POSTGRESQL_VERSION=9.6 PGHOST="/var/run/postgresql"

addons:
  postgresql: "9.6"

matrix:
  allow_failures:
    - julia: nightly
  fast_finish: true

notifications:
  email: false

git:
  depth: 99999999

## uncomment the following lines to allow failures on nightly julia
## (tests will run but not make your overall status red)
#matrix:
#  allow_failures:
#  - julia: nightly

## uncomment and modify the following lines to manually install system packages
#addons:
#  apt: # apt-get for linux
#    packages:
#    - gfortran


before_script:
  - export OLD_PATH=$LD_LIBRARY_PATH
  - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`mysql_config --libs | cut -d ' ' -f1 | sed 's/-L//'`
  # linux PostgreSQL 9.6.6
  #- sudo service postgresql stop && sudo service postgresql start $POSTGRESQL_VERSION
  # osx
  #- if [ "$TRAVIS_OS_NAME" == osx ]; then brew install mysql ; fi

  # Fixes PostgreSQL not starting on OSX. See https://github.com/travis-ci/travis-ci/issues/1875#issuecomment-263847183
  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then rm -rf /usr/local/var/postgres; fi
  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then initdb /usr/local/var/postgres; fi
  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then pg_ctl -D /usr/local/var/postgres start; fi
  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then createuser -s postgres; fi
  - psql --version
  - psql -c "CREATE DATABASE postgresqltest;" -U postgres
  # linux MySQL
  - mysql --version
  - if [ "$TRAVIS_OS_NAME" == osx ]; then brew services stop  mysql       ; fi
  - if [ "$TRAVIS_OS_NAME" == osx ]; then brew services start mysql       ; fi
  - mysql -e 'show variables like "socket";' -uroot
  - mysql -e 'CREATE DATABASE mysqltest;' -uroot
  - mysql -e 'GRANT ALL PRIVILEGES ON mysqltest.* TO "root"@"localhost" IDENTIFIED BY ""' -uroot

script:
  - julia -e 'using Pkg; Pkg.add("DataStreams"); Pkg.checkout("DataStreams", "master"); using DataStreams' # for MySQL.jl
  - julia --depwarn=no -e 'using Pkg; Pkg.clone("https://github.com/wookay/Octo.jl.git"); Pkg.test("Octo")'

after_script:
  - export LD_LIBRARY_PATH=$OLD_PATH
  - unset OLD_PATH

after_success:
  # push coverage results to Coveralls
  #- julia -e 'using Pkg; cd(Pkg.dir("Octo")); Pkg.add("Coverage"); using Coverage; Coveralls.submit(Coveralls.process_folder())'
  # push coverage results to Codecov
  #- julia -e 'using Pkg; cd(Pkg.dir("Octo")); Pkg.add("Coverage"); using Coverage; Codecov.submit(Codecov.process_folder())'
